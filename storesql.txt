CREATE TABLE Customer (
    customer_id SERIAL PRIMARY KEY, 
    name VARCHAR(100) NOT NULL,      -- 客户姓名
    email VARCHAR(100) NOT NULL,     -- 客户邮箱
    password VARCHAR(255) NOT NULL   -- 客户密码
);

CREATE TABLE Product (
    product_id SERIAL PRIMARY KEY,  
    product_name VARCHAR(100) NOT NULL, -- 商品名称
    price DECIMAL(10, 2) NOT NULL,     -- 商品价格，精确到小数点后两位
    description TEXT                   -- 商品描述
);

CREATE TABLE Bank (
    account_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    account_type VARCHAR(50) NOT NULL,   --User or Store
    balance DECIMAL(15, 2) DEFAULT 100.00
);

CREATE TABLE BankTransfer (
    bank_transfer_id SERIAL PRIMARY KEY,
    from_account INT NOT NULL,
    to_account INT NOT NULL,
    amount DECIMAL(15, 2) NOT NULL,
    status VARCHAR(50) NOT NULL DEFAULT 'pending' --transfer 状态 pending, failed, success
);

CREATE TABLE Warehouse (
    id SERIAL PRIMARY KEY,
    warehouse_id STRING,        -- 仓库ID
    product_id INT NOT NULL,          -- 外键，关联到 Products 表
    stock_level INT NOT NULL,         -- 库存数量
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

CREATE TABLE Order (
    order_id SERIAL PRIMARY KEY,
    customer_id INT NOT NULL,         -- 外键，关联到客户表
    product_id INT NOT NULL,          -- 外键，关联到商品表
    bank_transfer_id INT NOT NULL, -- 外键，关联到转账表
    order_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, -- 订单日期
    quantity INT NOT NULL,            -- 商品数量
    total_amount DECIMAL(10, 2) NOT NULL, -- 订单总金额
    status VARCHAR(50) NOT NULL DEFAULT 'pending', -- 订单状态，初始为 "pending", paying-payed-packaged-on the way-delivered-finished-refunded
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

CREATE TABLE OrderWarehouse (
    id  SERIAL PRIMARY KEY,
    order_id INT NOT NULL,            -- 外键，关联到订单表
    warehouse_id STRING,        
    quantity INT NOT NULL,            -- 商品数量，表示该订单从该仓库发货的数量
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (warehouse_id) REFERENCES Warehouses(warehouse_id)
);